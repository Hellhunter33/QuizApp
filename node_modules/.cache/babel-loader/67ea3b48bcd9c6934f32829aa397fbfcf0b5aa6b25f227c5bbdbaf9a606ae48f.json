{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\Quiz App\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowLeft, Clock, CheckCircle, XCircle } from 'lucide-react';\nimport Question from './Question';\nimport ProgressBar from './ProgressBar';\nimport Timer from './Timer';\nimport './Quiz.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = ({\n  questions,\n  category,\n  difficulty,\n  onFinishQuiz,\n  onBackToStart\n}) => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [questionTimeLeft, setQuestionTimeLeft] = useState(30);\n  const [isQuestionTimerActive, setIsQuestionTimerActive] = useState(true);\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questions.length * 100;\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeSpent(prev => prev + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Per-question timer effect\n  useEffect(() => {\n    if (!isQuestionTimerActive || isAnswered) return;\n    const questionTimer = setInterval(() => {\n      setQuestionTimeLeft(prev => {\n        if (prev <= 1) {\n          // Time's up - auto-submit the question\n          handleTimeUp();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(questionTimer);\n  }, [isQuestionTimerActive, isAnswered, currentQuestionIndex]);\n\n  // Reset question timer when moving to next question\n  useEffect(() => {\n    setQuestionTimeLeft(30);\n    setIsQuestionTimerActive(true);\n    setIsAnswered(false);\n  }, [currentQuestionIndex]);\n  const handleTimeUp = () => {\n    if (isAnswered) return;\n    setIsQuestionTimerActive(false);\n    setIsAnswered(true);\n    setShowFeedback(true);\n\n    // Auto-submit with no answer (time's up)\n    const newAnswer = {\n      questionIndex: currentQuestionIndex,\n      selectedAnswer: null,\n      correctAnswer: currentQuestion.correctAnswer,\n      isCorrect: false,\n      timeSpent: timeSpent,\n      timeUp: true\n    };\n\n    // Update userAnswers and handle the last question properly\n    setUserAnswers(prev => {\n      const updatedAnswers = [...prev, newAnswer];\n\n      // If this is the last question, finish the quiz after state update\n      if (currentQuestionIndex === questions.length - 1) {\n        setTimeout(() => {\n          finishQuizWithAnswers(updatedAnswers);\n        }, 2000);\n      }\n      return updatedAnswers;\n    });\n\n    // Auto-advance after showing feedback (only for non-last questions)\n    if (currentQuestionIndex < questions.length - 1) {\n      setTimeout(() => {\n        nextQuestion();\n      }, 2000);\n    }\n  };\n  const handleAnswerSelect = answerIndex => {\n    if (isAnswered) return;\n    setIsQuestionTimerActive(false);\n    setSelectedAnswer(answerIndex);\n    setIsAnswered(true);\n    setShowFeedback(true);\n    const isCorrect = answerIndex === currentQuestion.correctAnswer;\n    const newAnswer = {\n      questionIndex: currentQuestionIndex,\n      selectedAnswer: answerIndex,\n      correctAnswer: currentQuestion.correctAnswer,\n      isCorrect,\n      timeSpent: timeSpent,\n      timeUp: false\n    };\n\n    // Update userAnswers and handle the last question properly\n    setUserAnswers(prev => {\n      const updatedAnswers = [...prev, newAnswer];\n\n      // If this is the last question, finish the quiz after state update\n      if (currentQuestionIndex === questions.length - 1) {\n        setTimeout(() => {\n          finishQuizWithAnswers(updatedAnswers);\n        }, 2000);\n      }\n      return updatedAnswers;\n    });\n\n    // Auto-advance after showing feedback (only for non-last questions)\n    if (currentQuestionIndex < questions.length - 1) {\n      setTimeout(() => {\n        nextQuestion();\n      }, 2000);\n    }\n  };\n  const nextQuestion = () => {\n    setShowFeedback(false);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    } else {\n      // Don't reset state before finishing quiz\n      finishQuiz();\n    }\n  };\n  const finishQuiz = () => {\n    // Ensure all questions have answers (fill in any missing ones)\n    const completeAnswers = questions.map((question, index) => {\n      const existingAnswer = userAnswers.find(answer => answer.questionIndex === index);\n      if (existingAnswer) {\n        return existingAnswer;\n      } else {\n        // Create a default answer for any missing questions\n        return {\n          questionIndex: index,\n          selectedAnswer: null,\n          correctAnswer: question.correctAnswer,\n          isCorrect: false,\n          timeSpent: timeSpent\n        };\n      }\n    });\n    const score = completeAnswers.filter(answer => answer.isCorrect).length;\n    onFinishQuiz(completeAnswers, score, timeSpent);\n  };\n  const finishQuizWithAnswers = answers => {\n    console.log('Finishing quiz with answers:', answers);\n\n    // Ensure all questions have answers (fill in any missing ones)\n    const completeAnswers = questions.map((question, index) => {\n      const existingAnswer = answers.find(answer => answer.questionIndex === index);\n      if (existingAnswer) {\n        console.log(`Question ${index}: Found answer`, existingAnswer);\n        return existingAnswer;\n      } else {\n        console.log(`Question ${index}: No answer found, creating default`);\n        // Create a default answer for any missing questions\n        return {\n          questionIndex: index,\n          selectedAnswer: null,\n          correctAnswer: question.correctAnswer,\n          isCorrect: false,\n          timeSpent: timeSpent\n        };\n      }\n    });\n    console.log('Complete answers:', completeAnswers);\n    const score = completeAnswers.filter(answer => answer.isCorrect).length;\n    onFinishQuiz(completeAnswers, score, timeSpent);\n  };\n  const skipQuestion = () => {\n    const newAnswer = {\n      questionIndex: currentQuestionIndex,\n      selectedAnswer: null,\n      correctAnswer: currentQuestion.correctAnswer,\n      isCorrect: false,\n      timeSpent: timeSpent\n    };\n    setUserAnswers(prev => {\n      const updatedAnswers = [...prev, newAnswer];\n\n      // If this is the last question, finish the quiz after state update\n      if (currentQuestionIndex === questions.length - 1) {\n        setTimeout(() => {\n          finishQuizWithAnswers(updatedAnswers);\n        }, 100);\n      }\n      return updatedAnswers;\n    });\n    if (currentQuestionIndex < questions.length - 1) {\n      nextQuestion();\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"quiz-container\",\n    initial: {\n      opacity: 0,\n      y: 20\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    transition: {\n      duration: 0.5\n    },\n    role: \"main\",\n    \"aria-label\": \"Quiz Interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: onBackToStart,\n        \"aria-label\": \"Go back to category selection\",\n        children: [/*#__PURE__*/_jsxDEV(ArrowLeft, {\n          className: \"back-icon\",\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), \"Back to Categories\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"category-title\",\n          children: category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"question-counter\",\n            children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timers\",\n            children: [/*#__PURE__*/_jsxDEV(Timer, {\n              timeSpent: timeSpent,\n              label: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Timer, {\n              timeSpent: questionTimeLeft,\n              label: \"Question\",\n              isQuestionTimer: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      mode: \"wait\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          x: 50\n        },\n        animate: {\n          opacity: 1,\n          x: 0\n        },\n        exit: {\n          opacity: 0,\n          x: -50\n        },\n        transition: {\n          duration: 0.3\n        },\n        className: \"question-container\",\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          question: currentQuestion,\n          onAnswerSelect: handleAnswerSelect,\n          selectedAnswer: selectedAnswer,\n          showFeedback: showFeedback,\n          isAnswered: isAnswered\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)\n      }, currentQuestionIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), showFeedback && /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"feedback\",\n      initial: {\n        opacity: 0,\n        y: 20\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      transition: {\n        delay: 0.2\n      },\n      children: selectedAnswer === currentQuestion.correctAnswer ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-correct\",\n        children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n          className: \"feedback-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Correct! Well done!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-incorrect\",\n        children: [/*#__PURE__*/_jsxDEV(XCircle, {\n          className: \"feedback-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Incorrect. The correct answer is: \", currentQuestion.options[currentQuestion.correctAnswer]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-controls\",\n      children: !isAnswered && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"skip-button\",\n        onClick: skipQuestion,\n        \"aria-label\": \"Skip this question\",\n        children: \"Skip Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"kgmGNBr12TLPHncMQg4Y+IrGHvA=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","motion","AnimatePresence","ArrowLeft","Clock","CheckCircle","XCircle","Question","ProgressBar","Timer","jsxDEV","_jsxDEV","Quiz","questions","category","difficulty","onFinishQuiz","onBackToStart","_s","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","timeSpent","setTimeSpent","showFeedback","setShowFeedback","selectedAnswer","setSelectedAnswer","isAnswered","setIsAnswered","questionTimeLeft","setQuestionTimeLeft","isQuestionTimerActive","setIsQuestionTimerActive","currentQuestion","progress","length","timer","setInterval","prev","clearInterval","questionTimer","handleTimeUp","newAnswer","questionIndex","correctAnswer","isCorrect","timeUp","updatedAnswers","setTimeout","finishQuizWithAnswers","nextQuestion","handleAnswerSelect","answerIndex","finishQuiz","completeAnswers","map","question","index","existingAnswer","find","answer","score","filter","answers","console","log","skipQuestion","children","fileName","_jsxFileName","lineNumber","columnNumber","div","className","initial","opacity","y","animate","transition","duration","role","onClick","label","isQuestionTimer","mode","x","exit","onAnswerSelect","delay","options","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/Quiz App/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowLeft, Clock, CheckCircle, XCircle } from 'lucide-react';\nimport Question from './Question';\nimport ProgressBar from './ProgressBar';\nimport Timer from './Timer';\nimport './Quiz.css';\n\nconst Quiz = ({ questions, category, difficulty, onFinishQuiz, onBackToStart }) => {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [questionTimeLeft, setQuestionTimeLeft] = useState(30);\n  const [isQuestionTimerActive, setIsQuestionTimerActive] = useState(true);\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeSpent(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Per-question timer effect\n  useEffect(() => {\n    if (!isQuestionTimerActive || isAnswered) return;\n\n    const questionTimer = setInterval(() => {\n      setQuestionTimeLeft(prev => {\n        if (prev <= 1) {\n          // Time's up - auto-submit the question\n          handleTimeUp();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(questionTimer);\n  }, [isQuestionTimerActive, isAnswered, currentQuestionIndex]);\n\n  // Reset question timer when moving to next question\n  useEffect(() => {\n    setQuestionTimeLeft(30);\n    setIsQuestionTimerActive(true);\n    setIsAnswered(false);\n  }, [currentQuestionIndex]);\n\n  const handleTimeUp = () => {\n    if (isAnswered) return;\n    \n    setIsQuestionTimerActive(false);\n    setIsAnswered(true);\n    setShowFeedback(true);\n\n    // Auto-submit with no answer (time's up)\n    const newAnswer = {\n      questionIndex: currentQuestionIndex,\n      selectedAnswer: null,\n      correctAnswer: currentQuestion.correctAnswer,\n      isCorrect: false,\n      timeSpent: timeSpent,\n      timeUp: true\n    };\n\n    // Update userAnswers and handle the last question properly\n    setUserAnswers(prev => {\n      const updatedAnswers = [...prev, newAnswer];\n      \n      // If this is the last question, finish the quiz after state update\n      if (currentQuestionIndex === questions.length - 1) {\n        setTimeout(() => {\n          finishQuizWithAnswers(updatedAnswers);\n        }, 2000);\n      }\n      \n      return updatedAnswers;\n    });\n\n    // Auto-advance after showing feedback (only for non-last questions)\n    if (currentQuestionIndex < questions.length - 1) {\n      setTimeout(() => {\n        nextQuestion();\n      }, 2000);\n    }\n  };\n\n  const handleAnswerSelect = (answerIndex) => {\n    if (isAnswered) return;\n    \n    setIsQuestionTimerActive(false);\n    setSelectedAnswer(answerIndex);\n    setIsAnswered(true);\n    setShowFeedback(true);\n\n    const isCorrect = answerIndex === currentQuestion.correctAnswer;\n    const newAnswer = {\n      questionIndex: currentQuestionIndex,\n      selectedAnswer: answerIndex,\n      correctAnswer: currentQuestion.correctAnswer,\n      isCorrect,\n      timeSpent: timeSpent,\n      timeUp: false\n    };\n\n    // Update userAnswers and handle the last question properly\n    setUserAnswers(prev => {\n      const updatedAnswers = [...prev, newAnswer];\n      \n      // If this is the last question, finish the quiz after state update\n      if (currentQuestionIndex === questions.length - 1) {\n        setTimeout(() => {\n          finishQuizWithAnswers(updatedAnswers);\n        }, 2000);\n      }\n      \n      return updatedAnswers;\n    });\n\n    // Auto-advance after showing feedback (only for non-last questions)\n    if (currentQuestionIndex < questions.length - 1) {\n      setTimeout(() => {\n        nextQuestion();\n      }, 2000);\n    }\n  };\n\n  const nextQuestion = () => {\n    setShowFeedback(false);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    } else {\n      // Don't reset state before finishing quiz\n      finishQuiz();\n    }\n  };\n\n  const finishQuiz = () => {\n    // Ensure all questions have answers (fill in any missing ones)\n    const completeAnswers = questions.map((question, index) => {\n      const existingAnswer = userAnswers.find(answer => answer.questionIndex === index);\n      if (existingAnswer) {\n        return existingAnswer;\n      } else {\n        // Create a default answer for any missing questions\n        return {\n          questionIndex: index,\n          selectedAnswer: null,\n          correctAnswer: question.correctAnswer,\n          isCorrect: false,\n          timeSpent: timeSpent\n        };\n      }\n    });\n    \n    const score = completeAnswers.filter(answer => answer.isCorrect).length;\n    onFinishQuiz(completeAnswers, score, timeSpent);\n  };\n\n  const finishQuizWithAnswers = (answers) => {\n    console.log('Finishing quiz with answers:', answers);\n    \n    // Ensure all questions have answers (fill in any missing ones)\n    const completeAnswers = questions.map((question, index) => {\n      const existingAnswer = answers.find(answer => answer.questionIndex === index);\n      if (existingAnswer) {\n        console.log(`Question ${index}: Found answer`, existingAnswer);\n        return existingAnswer;\n      } else {\n        console.log(`Question ${index}: No answer found, creating default`);\n        // Create a default answer for any missing questions\n        return {\n          questionIndex: index,\n          selectedAnswer: null,\n          correctAnswer: question.correctAnswer,\n          isCorrect: false,\n          timeSpent: timeSpent\n        };\n      }\n    });\n    \n    console.log('Complete answers:', completeAnswers);\n    const score = completeAnswers.filter(answer => answer.isCorrect).length;\n    onFinishQuiz(completeAnswers, score, timeSpent);\n  };\n\n  const skipQuestion = () => {\n    const newAnswer = {\n      questionIndex: currentQuestionIndex,\n      selectedAnswer: null,\n      correctAnswer: currentQuestion.correctAnswer,\n      isCorrect: false,\n      timeSpent: timeSpent\n    };\n\n    setUserAnswers(prev => {\n      const updatedAnswers = [...prev, newAnswer];\n      \n      // If this is the last question, finish the quiz after state update\n      if (currentQuestionIndex === questions.length - 1) {\n        setTimeout(() => {\n          finishQuizWithAnswers(updatedAnswers);\n        }, 100);\n      }\n      \n      return updatedAnswers;\n    });\n    \n    if (currentQuestionIndex < questions.length - 1) {\n      nextQuestion();\n    }\n  };\n\n  if (!currentQuestion) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <motion.div\n      className=\"quiz-container\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      role=\"main\"\n      aria-label=\"Quiz Interface\"\n    >\n      <div className=\"quiz-header\">\n        <button \n          className=\"back-button\" \n          onClick={onBackToStart}\n          aria-label=\"Go back to category selection\"\n        >\n          <ArrowLeft className=\"back-icon\" aria-hidden=\"true\" />\n          Back to Categories\n        </button>\n        \n        <div className=\"quiz-info\">\n          <h2 className=\"category-title\">{category}</h2>\n          <div className=\"quiz-stats\">\n            <span className=\"question-counter\">\n              Question {currentQuestionIndex + 1} of {questions.length}\n            </span>\n            <div className=\"timers\">\n              <Timer timeSpent={timeSpent} label=\"Total\" />\n              <Timer timeSpent={questionTimeLeft} label=\"Question\" isQuestionTimer={true} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ProgressBar progress={progress} />\n\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={currentQuestionIndex}\n          initial={{ opacity: 0, x: 50 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -50 }}\n          transition={{ duration: 0.3 }}\n          className=\"question-container\"\n        >\n          <Question\n            question={currentQuestion}\n            onAnswerSelect={handleAnswerSelect}\n            selectedAnswer={selectedAnswer}\n            showFeedback={showFeedback}\n            isAnswered={isAnswered}\n          />\n        </motion.div>\n      </AnimatePresence>\n\n      {showFeedback && (\n        <motion.div\n          className=\"feedback\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          {selectedAnswer === currentQuestion.correctAnswer ? (\n            <div className=\"feedback-correct\">\n              <CheckCircle className=\"feedback-icon\" />\n              <span>Correct! Well done!</span>\n            </div>\n          ) : (\n            <div className=\"feedback-incorrect\">\n              <XCircle className=\"feedback-icon\" />\n              <span>\n                Incorrect. The correct answer is: {currentQuestion.options[currentQuestion.correctAnswer]}\n              </span>\n            </div>\n          )}\n        </motion.div>\n      )}\n\n      <div className=\"quiz-controls\">\n        {!isAnswered && (\n          <button \n            className=\"skip-button\" \n            onClick={skipQuestion}\n            aria-label=\"Skip this question\"\n          >\n            Skip Question\n          </button>\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default Quiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}